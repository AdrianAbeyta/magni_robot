global_costmap:
  global_frame: map
  robot_base_frame: base_link #base_footprint
  static_map: false
  inflation_radius: 0.5
  plugins:
    - {name: static_layer,            type: "costmap_2d::StaticLayer"}
    - {name: inflation_layer,         type: "costmap_2d::InflationLayer"}
    - {name: obstacle_layer,          type: "costmap_2d::ObstacleLayer"}

  static_layer:
                 track_unknown_space: true
                 enabled:             true
                 map_topic:           "/map"
    
  inflation_layer:
    enabled:              true
    cost_scaling_factor:  5.0  # exponential rate at which the obstacle cost drops off (default: 10)
    inflation_radius:     0.4  # max. distance from an obstacle at which costs are incurred for planning paths.
    track_unknown_space: true
  
  obstacle_layer: 
    track_unknown_space: true



  update_frequency: 20 #5.0
  static_map: false
  rolling_window: true
  width: 50
  height: 50
  resolution: 0.05

base_global_planner: "navfn/NavfnROS"
GlobalPlanner:                                  # Also see: http://wiki.ros.org/global_planner
  old_navfn_behavior: false                     # Exactly mirror behavior of navfn, use defaults for other boolean parameters, default false
  use_quadratic: true                           # Use the quadratic approximation of the potential. Otherwise, use a simpler calculation, default true
  use_dijkstra: false                            # Use dijkstra's algorithm. Otherwise, A*, default true
  use_grid_path: false                          # Create a path that follows the grid boundaries. Otherwise, use a gradient descent method, default false
  track_unknown_space: true
  allow_unknown: true                           # Allow planner to plan through unknown space, default true
                                                #Needs to have track_unknown_space: true in the obstacle / voxel layer (in costmap_commons_param) to work
  planner_window_x: 6.0 #0.0                         # default 0.0
  planner_window_y: 6.0 #0.0                         # default 0.0
  default_tolerance: 0.05                        # If goal in obstacle, plan to the closest point in radius default_tolerance, default 0.0
  
  publish_scale: 100                            # Scale by which the published potential gets multiplied, default 100
  planner_costmap_publish_frequency: 10 #0.0        # default 0.0
  
  lethal_cost: 253                              # default 253
  neutral_cost: 50                              # default 50
  cost_factor: 3.0                              # Factor to multiply each cost from costmap by, default 3.0
  publish_potential: true                       # Publish Potential Costmap (this is not like the navfn pointcloud2 potential), default true
  rolling_window: true